/-
Copyright (c) 2025 Yakov Pechersky. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yakov Pechersky
-/
import Mathlib.Topology.UniformSpace.Defs
import Mathlib.Topology.Bases

/-!
# Ultrametric (nonarchimedean) uniform spaces

Ultrametric (nonarchimedean) uniform spaces are ones that generalize ultrametric spaces by
having a uniformity based on equivalence relations.

## Main definitions

In this file we define `IsUltraUniformity`, a Prop mixin typeclass.

## Main results

* `TopologicalSpace.isTopologicalBasis_clopens`: a uniform space with a nonarchimedean uniformity
  has a topological basis of clopen sets in the topology, meaning that it is topologically
  zero-dimensional.

## Implementation notes

As in the `Mathlib/Topology/UniformSpace/Defs.lean` file, we do not reuse `Mathlib/Data/SetRel.lean`
but rather extend the relation properties as needed.

## TODOs

* Prove that `IsUltraUniformity` iff metrizable by `IsUltrametricDist` on a `PseudoMetricSpace`
  under a countable system/basis condition
* Generalize `IsUltrametricDist` to `IsUltrametricUniformity`
* Provide `IsUltraUniformity` for the uniformity in a `Valued` ring
* Generalize results about open/closed balls and spheres in `IsUltraUniformity` to
  combine applications for `MetricSpace.ball` and valued "balls"
* Use `IsUltraUniformity` to work with profinite/totally separated spaces
* Show that the `UniformSpace.Completion` of an `IsUltraUniformity` is `IsUltraUniformity`

## References

* [D. Windisch, *Equivalent characterizations of non-Archimedean uniform spaces*][windisch2021]
* [A. C. M. van Rooij, *Non-Archimedean uniformities*][vanrooij1970]

-/

open Set Filter Topology
open scoped SetRel Uniformity

variable {X : Type*}

/-- The relation is transitive. -/
@[deprecated SetRel.IsTrans (since := "2025-07-10")]
def IsTransitiveRel (V : SetRel X X) : Prop :=
  ‚àÄ ‚¶Éx y z‚¶Ñ, (x, y) ‚àà V ‚Üí (y, z) ‚àà V ‚Üí (x, z) ‚àà V

set_option linter.deprecated false in
@[deprecated SetRel.comp_subset_self (since := "2025-07-10")]
lemma IsTransitiveRel.comp_subset_self {s : SetRel X X}
    (h : IsTransitiveRel s) :
    s ‚óã s ‚äÜ s :=
  fun ‚ü®_, _‚ü© ‚ü®_, hxz, hzy‚ü© ‚Ü¶ h hxz hzy

set_option linter.deprecated false in
@[deprecated SetRel.isTrans_iff_comp_subset_self (since := "2025-07-10")]
lemma isTransitiveRel_iff_comp_subset_self {s : SetRel X X} :
    IsTransitiveRel s ‚Üî s ‚óã s ‚äÜ s :=
  ‚ü®IsTransitiveRel.comp_subset_self, fun h _ _ _ hx hy ‚Ü¶ h ‚ü®_, hx, hy‚ü©‚ü©

set_option linter.deprecated false in
@[deprecated SetRel.isTrans_empty (since := "2025-07-10")]
lemma isTransitiveRel_empty : IsTransitiveRel (X := X) ‚àÖ := by
  simp [IsTransitiveRel]

set_option linter.deprecated false in
@[deprecated SetRel.isTrans_univ (since := "2025-07-10")]
lemma isTransitiveRel_univ : IsTransitiveRel (X := X) Set.univ := by
  simp [IsTransitiveRel]

set_option linter.deprecated false in
@[deprecated SetRel.isTrans_singleton (since := "2025-07-10")]
lemma isTransitiveRel_singleton (x y : X) : IsTransitiveRel {(x, y)} := by
  simp +contextual [IsTransitiveRel]

set_option linter.deprecated false in
@[deprecated SetRel.isTrans_inter (since := "2025-07-10")]
lemma IsTransitiveRel.inter {s t : SetRel X X} (hs : IsTransitiveRel s) (ht : IsTransitiveRel t) :
    IsTransitiveRel (s ‚à© t) :=
  fun _ _ _ h h' ‚Ü¶ ‚ü®hs h.left h'.left, ht h.right h'.right‚ü©

set_option linter.deprecated false in
@[deprecated SetRel.isTrans_iInter (since := "2025-07-10")]
lemma IsTransitiveRel.iInter {Œπ : Type*} {U : (i : Œπ) ‚Üí SetRel X X}
    (hU : ‚àÄ i, IsTransitiveRel (U i)) :
    IsTransitiveRel (‚ãÇ i, U i) := by
  intro _ _ _ h h'
  simp only [mem_iInter] at h h' ‚ä¢
  intro i
  exact hU i (h i) (h' i)

set_option linter.deprecated false in
@[deprecated SetRel.IsTrans.sInter (since := "2025-07-10")]
lemma IsTransitiveRel.sInter {s : Set (SetRel X X)} (h : ‚àÄ i ‚àà s, IsTransitiveRel i) :
    IsTransitiveRel (‚ãÇ‚ÇÄ s) := by
  rw [sInter_eq_iInter]
  exact IsTransitiveRel.iInter (by simpa)

set_option linter.deprecated false in
@[deprecated SetRel.isTrans_preimage (since := "2025-07-10")]
lemma IsTransitiveRel.preimage_prodMap {Y : Type*} {t : Set (Y √ó Y)}
    (ht : IsTransitiveRel t) (f : X ‚Üí Y) :
    IsTransitiveRel (Prod.map f f ‚Åª¬π' t) :=
  fun _ _ _ h h' ‚Ü¶ ht h h'

set_option linter.deprecated false in
@[deprecated SetRel.isTrans_symmetrize (since := "2025-07-10")]
lemma IsTransitiveRel.symmetrizeRel {s : SetRel X X} (h : IsTransitiveRel s) :
    IsTransitiveRel (SetRel.symmetrize s) :=
  fun _ _ _ hxy hyz ‚Ü¶ ‚ü®h hxy.1 hyz.1, h hyz.2 hxy.2‚ü©

set_option linter.deprecated false in
@[deprecated SetRel.comp_eq_self (since := "2025-07-10")]
lemma IsTransitiveRel.comp_eq_of_idRel_subset {s : SetRel X X}
    (h : IsTransitiveRel s) (h' : idRel ‚äÜ s) :
    s ‚óã s = s :=
  le_antisymm h.comp_subset_self (subset_comp_self h')

namespace UniformSpace

lemma ball_subset_of_mem {V : SetRel X X} [V.IsTrans] {x y : X} (hy : y ‚àà ball x V) :
    ball y V ‚äÜ ball x V :=
  ball_subset_of_comp_subset hy SetRel.comp_subset_self

lemma ball_eq_of_mem {V : SetRel X X} [V.IsSymm] [V.IsTrans] {x y : X} (hy : y ‚àà ball x V) :
    ball x V = ball y V := by
  refine le_antisymm (ball_subset_of_mem ?_) (ball_subset_of_mem hy)
  rwa [‚Üê mem_ball_symmetry]

end UniformSpace

variable [UniformSpace X]

variable (X) in
/-- A uniform space is ultrametric if the uniformity `ùì§ X` has a basis of equivalence relations. -/
class IsUltraUniformity : Prop where
  hasBasis : (ùì§ X).HasBasis
    (fun s : SetRel X X => s ‚àà ùì§ X ‚àß SetRel.IsSymm s ‚àß SetRel.IsTrans s) id

lemma IsUltraUniformity.mk_of_hasBasis {Œπ : Type*} {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí SetRel X X}
    (h_basis : (ùì§ X).HasBasis p s) (h_symm : ‚àÄ i, p i ‚Üí SetRel.IsSymm (s i))
    (h_trans : ‚àÄ i, p i ‚Üí SetRel.IsTrans (s i)) :
    IsUltraUniformity X where
  hasBasis := h_basis.to_hasBasis'
    (fun i hi ‚Ü¶ ‚ü®s i, ‚ü®h_basis.mem_of_mem hi, h_symm i hi, h_trans i hi‚ü©, subset_rfl‚ü©)
    (fun _ hs ‚Ü¶ hs.1)

namespace UniformSpace

lemma isOpen_ball_of_mem_uniformity (x : X) {V : SetRel X X} [V.IsTrans] (h' : V ‚àà ùì§ X) :
    IsOpen (ball x V) := by
  rw [isOpen_iff_ball_subset]
  intro y hy
  exact ‚ü®V, h', ball_subset_of_mem hy‚ü©

lemma isClosed_ball_of_isSymm_of_isTrans_of_mem_uniformity (x : X) {V : SetRel X X} [V.IsSymm]
    [V.IsTrans] (h' : V ‚àà ùì§ X) :
    IsClosed (ball x V) := by
  rw [‚Üê isOpen_compl_iff, isOpen_iff_ball_subset]
  exact fun y hy ‚Ü¶ ‚ü®V, h', fun z hyz hxz ‚Ü¶ hy <| V.trans hxz <| V.symm hyz‚ü©

@[deprecated (since := "2025-07-10")]
alias isClosed_ball_of_isSymmetricRel_of_isTransitiveRel_of_mem_uniformity :=
  isClosed_ball_of_isSymm_of_isTrans_of_mem_uniformity

lemma isClopen_ball_of_isSymm_of_isTrans_of_mem_uniformity (x : X) {V : SetRel X X} [V.IsSymm]
    [V.IsTrans] (h' : V ‚àà ùì§ X) :
    IsClopen (ball x V) :=
  ‚ü®isClosed_ball_of_isSymm_of_isTrans_of_mem_uniformity _ ‚Äπ_‚Ä∫, isOpen_ball_of_mem_uniformity _ ‚Äπ_‚Ä∫‚ü©

variable [IsUltraUniformity X]

lemma nhds_basis_clopens (x : X) :
    (ùìù x).HasBasis (fun s : Set X => x ‚àà s ‚àß IsClopen s) id := by
  refine (nhds_basis_uniformity' (IsUltraUniformity.hasBasis)).to_hasBasis' ?_ ?_
  ¬∑ intro V ‚ü®hV, h_symm, h_trans‚ü©
    exact ‚ü®ball x V, ‚ü®mem_ball_self _ hV,
      isClopen_ball_of_isSymm_of_isTrans_of_mem_uniformity _ hV‚ü©, le_rfl‚ü©
  ¬∑ rintro u ‚ü®hx, hu‚ü©
    simp [hu.right.mem_nhds_iff, hx]

/-- A uniform space with a nonarchimedean uniformity is zero-dimensional. -/
lemma _root_.TopologicalSpace.isTopologicalBasis_clopens :
    TopologicalSpace.IsTopologicalBasis {s : Set X | IsClopen s} :=
  .of_hasBasis_nhds fun x ‚Ü¶ by simpa [and_comm] using nhds_basis_clopens x

end UniformSpace
